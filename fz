#!/usr/bin/python3

import sys
import os
import subprocess
import configparser

HOME = os.environ["HOME"]
COPY_CMD = "wl-copy"
context = set()

# Usage: fz [option]
# Selector list: prompts the user to select an option from a list, then
# performs the action associated with that option.

# The scheme for the script is:
# generate-options -> fzf -> perform-action => repeat

# helpers


def parse_conf() -> dict:
    config = configparser.ConfigParser()
    config.read(os.path.join(HOME, ".scripts", "bin", "fz.ini"))

    SSHFS = {}
    for k, v in config["SSHFS"].items():
        try:
            name, userathost = k.split(" ")
            user, host = userathost.split("@")
            remotedir, localdir, password, autopswd, shell = v.split(" ")
        except Exception as e:
            print("Invalid SSHFS entry")
            print(e)
            sys.exit(1)
        SSHFS[name] = {
            "user": user,
            "host": host,
            "remotedir": remotedir,
            "localdir": os.path.join(HOME, "remote", localdir),
            "password": password,
            "autopswd": autopswd == "YES",
            "shell": shell}
    return SSHFS


glob_ssfs_lookup = parse_conf()


def call_fzf(lin: str, **kwargs):
    args = ["fzf"]
    for k, v in kwargs.items():
        args.append(f"--{k}")
        args.append(v)
    if "height" not in kwargs:
        args.append("--height")
        args.append("50%")
    if "border" not in kwargs:
        args.append("--border")
    if "reverse" not in kwargs:
        args.append("--reverse")

    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    out, _ = p.communicate(lin.encode())
    return out.decode().strip()


def call_dmenu(lin: str = "", **kwargs):

    prompt = kwargs.get("prompt", "")
    kwargs.pop("prompt", None)
    args = ["dmenu", "-b", "-fn", "monospace:size=20", "-nb", "#141c21",
            "-nf", "#d8dee9", "-sb", "#88c0d0", "-sf", "#2e3440",
            "-p", prompt]
    for k, v in kwargs.items():
        args.append(f"-{k}")
        args.append(v)

    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    out, _ = p.communicate(lin.encode())
    return out.decode().strip()


def notify(msg: str, heading: str):
    dunst = subprocess.run(
        ["notify-send", "-h", "string:bgcolor:#2e3440",
         "-h", "string:fgcolor:#d8dee9 ", heading, msg])
    return dunst.returncode

# The command handlers


def bt():
    devices = subprocess.run(["bluetoothctl", "devices"],
                             stdout=subprocess.PIPE)\
        .stdout\
        .decode()\
        .splitlines()
    devices = [x.split() for x in devices]
    names = [" ".join(x[2:]) for x in devices]
    ids = [x[1] for x in devices]
    choice = call_fzf("\n".join(names), prompt="Select a device: ")

    if choice == "":
        return
    try:
        code = subprocess.run(
            ["bluetoothctl", "connect", ids[names.index(choice)]])
        if code.returncode == 0:
            notify(
                "Connected to <span color='orange':" +
                f"weight='bold'>{choice}</span>", "Bluetooth")
        else:
            notify("Bluetooth connection failed", "Bluetooth")
        return
    except KeyboardInterrupt:
        notify("Bluetooth connection failed", "Bluetooth")
        notify("<span color='orange'>" +
               "Try adding the device to the trusted list</span>", "Bluetooth")
        return


def ubt():
    devices = subprocess.run(["bluetoothctl", "devices"],
                             stdout=subprocess.PIPE)
    devices = devices.stdout.decode().splitlines()
    devices = [x.split() for x in devices]
    names = [" ".join(x[2:]) for x in devices]
    ids = [x[1] for x in devices]
    choice = call_fzf("\n".join(names), prompt="Select a device: ")

    if choice == "":
        return

    subprocess.run(["bluetoothctl", "disconnect", ids[names.index(choice)]])
    notify("Disconnected from <span color='orange' " +
           f"weight='bold'>{choice}</span>", "Bluetooth")
    return


def bg():
    picdir = "/home/abdullah/Pictures/Wallpapers"
    pics = sorted(os.listdir(picdir), reverse=True)
    if "a" in context:
        os.system(
            f"swaymsg output '*' bg {picdir}/$(ls {picdir}" +
            "| rg 'a.*'| shuf -n 1) fill")
        return
    elif "w" in context:
        os.system(
            f"swaymsg output '*' bg {picdir}/$(ls {picdir}" +
            "| rg 'w.*'| shuf -n 1) fill")
        return

    choice = call_fzf("random\narandom\n" + "\n".join(pics),
                      prompt="Select a background: ",
                      preview="swaymsg output '*'" +
                              f" bg { picdir }/{{}} fill",

                      **{"preview-window": "0%"})
    if choice == "":
        return

    # Using sway on Wayland
    if choice == "random":
        notify("Setting background to a random picture", "Background")
        os.system(
            f"swaymsg output '*' bg {picdir}/$(ls {picdir}" +
            "| rg -v 'a.*'| shuf -n 1) fill")
    elif choice == "arandom":
        notify("Setting background to a random picture", "Background")
        os.system(
            f"swaymsg output '*' bg {picdir}/$(ls {picdir}" +
            "| rg 'a.*'| shuf -n 1) fill")
    else:
        notify(
            f"Setting background to <span color='orange'>{choice}" +
            "</span>", "Background")
        # The preview window does the job
        return


base_lsblk = ["nvme0n1", "nvme0n1p1", "nvme0n1p2", "nvme0n1p3",
              "nvme0n1p4", "nvme0n1p5", "nvme0n1p6", "nvme0n2", "nvme0n3"]


def mount():
    p1 = subprocess.Popen(["lsblk", "-l"], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(["grep", "-E", "part"], stdin=p1.stdout,
                          stdout=subprocess.PIPE)
    p3 = subprocess.Popen(["awk", "{print $1}"], stdin=p2.stdout,
                          stdout=subprocess.PIPE)
    if p1.stdout:
        p1.stdout.close()
    if p2.stdout:
        p2.stdout.close()
    out, _ = p3.communicate()
    points = filter(lambda x: x not in base_lsblk, out.decode().splitlines())
    choice = call_fzf("\n".join(points), prompt="Select a mount point: ")

    if choice == "":
        return

    mount_dir = f"{HOME}/mounts/{choice}"

    os.system(f"mkdir -p { mount_dir}")

    subprocess.run(["sudo", "mount", f"/dev/{choice}", mount_dir,
                    "-o", "uid=abdullah,gid=abdullah"])
    notify(
        f"Mounted <span color='orange'>{ choice }</span>" +
        f"to { mount_dir}", "Disk Mount")
    return


def umount():
    p1 = subprocess.Popen(["lsblk", "-l"], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(["grep", "-e", "part"], stdin=p1.stdout,
                          stdout=subprocess.PIPE)
    p3 = subprocess.Popen(["awk", "{print $1,$7}"], stdin=p2.stdout,
                          stdout=subprocess.PIPE)

    if p1.stdout:
        p1.stdout.close()
    if p2.stdout:
        p2.stdout.close()
    out, _ = p3.communicate()
    points = filter(lambda x: x.split()[
                    0] not in base_lsblk, out.decode().splitlines())
    choice = call_fzf("\n".join(points), prompt="Select a mount point: ")

    if choice == "":
        return

    name, mount_dir = choice.split()

    ret = subprocess.run(["sudo", "umount", mount_dir])
    if ret.returncode == 0:
        notify(
            f"Unmounted <span color='orange'>{ name }</span>" +
            f"from {mount_dir}", "Disk Unmount")
    else:
        notify("<span color='red'>Unmount failed</span>", "Disk Unmount")
    return


def display():
    notify("<span color='orange'>Display not implemented yet" +
           "</span>", "Display")
    return


def eth():
    ret = subprocess.run(["sudo", "ifplugd"])
    if ret.returncode == 0:
        notify("Ethernet cable plugged in", "Network")
    return


def fs():
    filesys = []
    mounted_systems = subprocess.run(["cat", "/etc/mtab"],
                                     stdout=subprocess.PIPE)
    mounted_ = []
    for line in mounted_systems.stdout.decode().splitlines():
        if "sshfs" in line:
            mounted_.append(line.split(":")[-1].split()[0])

    revmap = {}
    for key, data in glob_ssfs_lookup.items():
        if data["remotedir"] not in mounted_:
            filesys.append(f"{key} ({data['host']})")
            revmap[f"{key} ({data['host']})"] = key

    choice = revmap[call_fzf(
        "\n".join(filesys), prompt="Select a filesystem: ")]

    if choice == "":
        return

    host_data = glob_ssfs_lookup[choice]

    # fs_cmd: username@host remote_dir local_dir password

    if host_data["autopswd"]:
        sshcmd = f"echo { host_data['password'] } | " + \
            f"sshfs { host_data['user'] }@" + \
            f"{ host_data['host'] }:{ host_data['remotedir'] } " + \
            f"{ host_data['localdir'] } -o password_stdin "
    else:
        os.system(f"echo { host_data['password'] } | " + COPY_CMD)
        sshcmd = f"sshfs { host_data['user'] }@" + \
            f"{ host_data['host'] }:{ host_data['remotedir'] } " + \
            f"{ host_data['localdir'] }"

    os.system(f"mkdir -p { host_data['localdir'] }")
    if (os.system(sshcmd) != 0):
        notify("<span color='red'>Mount failed</span>", "Remote Filesystem")
        os.system(f"rm -rf { host_data['localdir'] }")
        return

    notify(
        f"Mounted <span color='orange'>{ choice }" +
        f"</span> to { host_data['localdir'] }", "Remote Filesystem")

    return


def ufs():
    filesys = []
    mounted_systems = subprocess.run(["cat", "/etc/mtab"],
                                     stdout=subprocess.PIPE)

    mounted_ = []
    for line in mounted_systems.stdout.decode().splitlines():
        if "sshfs" in line:
            mounted_.append(line.split(":")[-1].split()[0])

    revmap = {}
    for key, data in glob_ssfs_lookup.items():
        if data["remotedir"] in mounted_:
            filesys.append(f"{key} ({data['host']})")
            revmap[f"{key} ({data['host']})"] = key

    choice = revmap[call_fzf(
        "\n".join(filesys), prompt="Select a filesystem: ")]

    if choice == "":
        return

    host_data = glob_ssfs_lookup[choice]

    if (os.system(f"fusermount -u {host_data['localdir']}") != 0):
        notify("<span color='red'>Unmount failed</span>", "Remote Filesystem")
        return
    os.system(f"rm -rf {host_data['localdir']}")

    notify(
        f"Unmounted <span color='orange'>{ choice }" +
        f"</span> from { host_data['localdir'] }", "Remote Filesystem")

    return


def ssh():
    revmap = {}
    for key, data in glob_ssfs_lookup.items():
        revmap[f"{data['host']} ({data['user']})"] = key

    userchoice = call_fzf("\n".join(
        (f"{hdata['host']} ({hdata['user']})"
         for hdata in glob_ssfs_lookup.values())),
        prompt="Select a host: ")

    if userchoice == "":
        return

    choice = revmap[userchoice]
    host_data = glob_ssfs_lookup[choice]

    os.system(f"echo { host_data['password'] } | " +
              COPY_CMD)
    cmd = ["ssh", f"{host_data['user']}@{host_data['host'] }", "-t", f"'export TERM=xterm-256color; {host_data['shell']}'"]
    print(" ".join(cmd))
    p1 = subprocess.Popen(cmd)

    notify(
        f"Connecting to <span color='orange'>{ choice }</span>", "SSH")
    try:
        p1.wait()
    except KeyboardInterrupt:
        p1.kill()
        notify("<span color='red'>SSH connection interrupted</span>", "SSH")
        return
    if p1.returncode != 0:
        notify(
            f"<span color='red'>SSH connection failed\n\
Return code: {p1.returncode}</span>", "SSH")

    return


def ytfzf():
    subprocess.run(["ytfzf", "-lstf", "--force-youtube",
                   "--notify-playing", "-T", "swayimg"])
    return


def passwd():
    import re
    import json
    p1 = subprocess.run(["lpass", "ls"], stdout=subprocess.PIPE)
    choice = call_fzf(p1.stdout.decode(), prompt="Select an account: ")

    id = re.search(r"\d+", choice).group(0)
    p2 = subprocess.run(["lpass", "show", "-j", id], stdout=subprocess.PIPE)

    response = json.loads(p2.stdout.decode())[0]

    name = f"<span color='#00ff00'>{response['name']}</span>"
    passwd = response["password"]
    username = f"<span color='orange'>{response['username']}</span>"

    os.system(f"echo '{ passwd }' | " + COPY_CMD)
    notify(
        f"Password for <b>{name}: {username}" +
        "</b> copied to clipboard", "LastPass")
    return


def waldl():
    # choose "a" or "w";
    # use dmenu for query
    # pass to waldl

    option = call_fzf("w\na", prompt="Choose a or w: ")
    if option == "":
        return

    query = call_dmenu(prompt="Enter query: ")
    if query == "":
        return

    subprocess.run(["waldl", option, query])
    return


def unicode():
    import re
    emojis = os.path.join(HOME, ".scripts", "bin", "data", "emoji-test.txt")
    with open(emojis, "r") as f:
        choices = []
        emojis = []
        for line in f:
            if line.startswith("#") or line == "\n":
                continue
            # regex detects:         codepoint; status# emoji
            # use regex to get emojis

            regex = r"^((\S+\s)+)\s+;\s+(\S+)\s+#\s+(\S+) \S+ (.*)"
            match = re.search(regex, line)
            if match and match.group(3) == "fully-qualified":
                choices.append(
                    f"{match.group(1)} {match.group(5)} ({match.group(4)})")
                emojis.append(match.group(4))

    choice = call_fzf("\n".join(choices), prompt="Select an emoji: ")
    if choice == "":
        return

    index = choices.index(choice)
    emoji = emojis[index]

    os.system(f"echo '{ emoji }' | " + COPY_CMD)
    return


bg_tags = ["bg", "background", "image", "wallpaper", "Picture", "Pictures",
           "pic", "pics", "image", "images"]
mount_tags = ["mount", "mountp", "usb", "drive", "drives", "cd", "CD", "dvd",
              "DVD", "flash", "flashdrive", "flashdrives", "memory", "stick",
              "thumbdrive", "thunderbolt"]
umount_tags = ["umount", "unmount", "unmountp", "remove", "eject", "unplug",
               "unplugp"]
display_tags = ["display", "monitor", "screen", "screens", "multi", "dual",
                "dualscreen", "dualscreens", "mirror", "extend", "extendscreen"
                ]
eth_tags = ["ethernet", "eth", "network", "networks", "wifi", "wifis",
            "wlan", "wlans", "lan", "lans", "wireless", "connect",
            "connected", "connection", "connections"]
remote_fs_tags = ["remote", "remotefs", "remotefilesystem",
                  "remotefilesystems", "remote_fs", "remote_fs",
                  "remote_filesystem", "remote_filesystems", "fileserve", "fs"]
unremote_fs_tags = ["unremote", "unremotefs", "unremotefilesystems",
                    "unremote_fs", "unremote_fs", "removefilesystem",
                    "disconnect", "ufs", "unfs"]
bt_tags = ["bluetooth", "bt"]
unbt_tags = ["unbluetooth", "ubt", "unbt"]
ssh_tags = ["ssh", "remoteshell" "shell"]
ytfzf_tags = ["ytfzf", "youtube", "yt", "video", "videos", "music", "song"]
pass_tags = ["pass", "password", "passwords", "lpass", "lastpass", "lpassp"]
waldl_tags = ["waldl", "wallhaven", "wallpaper", "wallpapers", "wallhaven.cc"]
unicode_tags = ["unicode", "emoji", "emojis", "emote", "emotes", "emoticon"]


tags = [
    bg_tags, mount_tags, umount_tags, display_tags, eth_tags,
    remote_fs_tags, unremote_fs_tags, bt_tags, unbt_tags, ssh_tags,
    ytfzf_tags, pass_tags, waldl_tags, unicode_tags

]
tags_fun = [bg, mount, umount, display, eth,
            fs, ufs, bt, ubt, ssh, ytfzf, passwd, waldl, unicode]

assert len(tags) == len(tags_fun)


def fz():
    spaced_tags = [(20*"\t").join(x) for x in tags]
    choice = call_fzf("\n".join(spaced_tags),
                      prompt="Select a tag: ",
                      preview="echo {1}",
                      **{"preview-window": "right:20%"})

    if choice == "":
        return

    index = tags.index(choice.split())
    tags_fun[index].__call__()
    return


def print_usage():
    usage = """Usage: fz [option] <extra context>
Options:
  fz      - run fz again, but this time use fzf to select the option
  bg      - select a background from ~/Pictures/Wallpapers
  mount   - select a mount point, then mount it
  umount  - select a mount point, then unmount it
  ssh     - select a host, then ssh into it
  disp    - select a monitor using randr, then ask where to display it
  eth     - run ifplugd to connect to the internet
  fs      - select a filesystem, particulary remote, then mount it
  ufs     - select a filesystem, particulary remote, then unmount it
  bt      - select a bluetooth device, then connect to it
  ubt     - select a bluetooth device, then disconnect from it
  ytfzf   - search youtube for a video, then play it using mpv
  passwd  - select a password from lastpass, then copy it to the clipboard
  waldl   - download a wallpaper from wallhaven
  unicode - search unicode emojis, then copy it to the clipboard
  help    - print this help message"""
    print(usage)


def main():
    if len(sys.argv) == 1:
        fz()
        return

    if len(sys.argv) > 2:
        for i in range(2, len(sys.argv)):
            context.add(sys.argv[i])
    match sys.argv[1]:
        case "p" | "pa" | "pass" | "password":
            passwd()
        case "m" | "mnt" | "mount":
            mount()
        case "d" | "disp" | "display":
            display()
        case "e" | "eth" | "ethernet":
            eth()
        case "f" | "fs" | "remotefs":
            fs()
        case "h" | "help":
            print_usage()
        case "b" | "bt":
            bt()
        case "fz" | "fzf":
            fz()
        case "um" | "umnt" | "umount":
            umount()
        case "bg":
            bg()
        case "uf" | "ufs" | "unmountfs" | "unfs":
            ufs()
        case "ubt":
            ubt()
        case "ssh" | "s":
            ssh()
        case "yt" | "ytfzf":
            notify("<span color='red'>Add more options</span>", "TODO")
            ytfzf()
        case "wdl" | "waldl":
            waldl()
        case "unicode" | "uni":
            unicode()
        case _:
            print_usage()
            sys.exit(1)


if __name__ == "__main__":
    main()
